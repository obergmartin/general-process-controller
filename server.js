'use strict';
//http://stackoverflow.com/questions/24468459/sending-a-json-to-server-and-retrieving-a-json-in-return-without-jquery
//http://stackoverflow.com/questions/15427220/how-to-handle-post-request-in-node-js
var http = require('http');
var url = require('url');
var fs = require('fs');
var ChildProcess = require('child_process');

var re_date = /^\/\d{4}-\d{2}-\d{2}/;

var html404 = '<!doctype html><html><head><title>404</title></head><body>404: Resource Not Found</body></html>';
var html405 = '<!doctype html><html><head><title>405</title></head><body>405: Method Not Supported</body></html>';
var html413 = '<!doctype html><html><head><title>413</title></head><body>413: Request Entity Too Large</body></html>';

//var html_dir = process.argv[2];
var base_dir = process.argv[2];
//console.log(base_dir);


//function getPathFromUrl(url) {
//  return url.split("?")[0];
  //return url.split("?")[0].split("#")[0];
//}



var serverPort = 8182;
//http.createServer(

//function Server(base_dir) {
//  this.base_dir = base_dir;
  
var ServerFn = function (request, response) {
    var params = url.parse(request.url,true);
    //console.log(request.url);
    if (request.method === "GET") {
      if (request.url === "/favicon.ico") {
        // Don't have an icon for any pages yet, won't actually be requested.
        response.writeHead(404, {'Content-Type': 'text/html'});
        response.write(html404);
        response.end();
      }
      else if (re_date.test(request.url)) {
        // if a log file is requested, convert it to Json and return it in the 
        // response.
        //console.log(request.url);
        //console.log('json');
        fs.readFile(base_dir+'data/'+request.url, 'utf-8', function(error,data){
          //console.log(request.url);
           if (error) {
             response.writeHead(404, {"Content-type":"text/html"});
             response.end("Sorry the page was not found.. ..");
           } else {
             response.writeHead(200, {"Content-type":"text/html"});
             //response.end(this.ConvertCSV(data));
             response.end(ConvertCSV(data));
           }
        });
      }
      else if (request.url === '/loglist.json') {
        // The list of existing log files needs to be generated by GenLogList()
        response.writeHead(200, {"Content-type":"text/html"});
        //response.end(this.GenLogList());
        response.end(GenLogList());
      }
      else if (request.url === '/dslist.json') {
        // The list of ds devices needs to be generated by GenDSSensorList()
        response.writeHead(200, {"Content-type":"text/html"});
        //response.end(this.GenDSSensorList());
        response.end(GenDSSensorList());
      }
      else {
        // This is the normal page request
        console.log(request.url);
        var cur_url = request.url.split("?")[0];
        //fs.readFile(this.base_dir + cur_url, function(error, data){
        fs.readFile(base_dir + cur_url, function(error, data){
        //console.log(params.path);
        //console.log(request.url);
        //console.log(getPathFromUrl(request.url));
          if (error) {
            response.writeHead(404, {"Content-type":"text/html"});
            response.end("Sorry the page was not found....");
          } else {
            //response.setHeader("Content-Type", "text/html");
            response.writeHead(200, {"Content-type":"text/html"});
            response.end(data);
          }
        });
      }
    } else if (request.method === "POST") {
      console.log('post!');
      
      var requestBody = '';
      request.on('data', function(data) {
          requestBody += data;
          if(requestBody.length > 1e7) {
            response.writeHead(413, 'Request Entity Too Large', {'Content-Type': 'text/html'});
            response.end(html413);
          }
      });
      var pages = {
        "/setup.html": "init.json",
        "/statusedit.html": "status.json",
        "/devices.html": "devices.json",
        "/plotedit.html": "plotedit.json"
      };
        
      if (request.url in pages) {
        request.on('end', function() {
          var init = JSON.parse(requestBody).init;
          //console.log(init);
          //fs.writeFile(this.base_dir + pages[request.url], requestBody, 'utf8');
          fs.writeFile(base_dir + pages[request.url], requestBody, 'utf8');
          response.writeHead(200, {'Content-Type': 'text/html'});
          response.end('Done!');
          if (request.url === "/setup.html") {
            // in addition to init.json setup.html also updates plotVars
            this.updatePlotVars(init.DataLog);
          } 
        });
      }
      else {
        response.writeHead(404, 'Resource Not Found', {'Content-Type': 'text/html'});
        response.end(html404);
      }
    } else {
      response.writeHead(405, 'Method Not Supported', {'Content-Type': 'text/html'});
      return response.end(html405);
    }
  }

//).listen(serverPort);


var updatePlotVars = function(LogData) {
  //console.log("updating plotedit.json");
  //plotVars = JSON.parse(fs.readFileSync(this.base_dir+'plotedit.json')).plotVars;
  plotVars = JSON.parse(fs.readFileSync(base_dir+'plotedit.json')).plotVars;

  // Add new variables to plotVars
  var changes = false;
  for (var i = 0; i < LogData.length; i++) {
    d = LogData[i];
    //console.log(d);
    if (!(plotVars.hasOwnProperty(d))) {
      //console.log(d);
      changes = true;
      plotVars[d] = {
        Axis: 'y',
        Label: d,
        isBool: false,
        Options: ''
      };
      //console.log(plotVars);
    }
  }

  // Remove old variables from plotVars
  for (var v in plotVars) {
    if (LogData.indexOf(v) < 0) {
      //console.log(d);
      changes = true;
      //console.log('removing: ');
      //console.log(v);
      delete plotVars[v]
      //console.log(plotVars);
    }
  }

  // Write if any changes
  if (changes) {
    console.log("updating plotedit.json");
    // Write file
    var toWrite = JSON.stringify({"plotVars": plotVars}, null, ' ');
    //fs.writeFileSync(this.base_dir+'plotedit.json', toWrite, 'utf8');
    fs.writeFileSync(base_dir+'plotedit.json', toWrite, 'utf8');
  }

};


var ConvertCSV = function(fn) {
  // Data are saved in CSV format space efficiency and for easy appending of 
  // new values.  A request for a CSV data file will open one and convert it 
  // to Json.
  
  var lines = fn.split('\n');
  var names = lines[0].split(',');
  var dat = {};
  for (var j = 0; j < names.length; j++){
    dat[names[j]] = [];
  }
  
  for (var i = 1; i < lines.length; i++) {
    if (lines[i].length > 0) {
      var vals = lines[i].split(','); 
      for (var j=0; j<names.length; j++) {
        dat[names[j]].push(vals[j]);
      }
    }
  }
  
  var sdat = 'data = ' + JSON.stringify(dat);
  return sdat;
};


var GenLogList = function() {
  // Generates a list of of log files based on filenames that have a date format
  // e.g. 2017-01-01.csv
  // This list is used to populate a dropdown menu in loghistory.html
  //var f = fs.readdirSync(this.base_dir+'data/');
  var f = fs.readdirSync(base_dir+'data/');
  f = f.filter(function(i) { return /^\d{4}-\d{2}-\d{2}/.test(i); });
  //console.log(f);
  return JSON.stringify({"loglist": f});
};


var GenDSSensorList = function() {
  var r = ChildProcess.execSync('cat /sys/devices/w1_bus_master1/w1_master_slaves').toString().trim().split('\n');
  var tosend = {"dslist": r};
  console.log(tosend);
  return JSON.stringify(tosend);
  //return "";
};

//var s = new Server();
var Server = http.createServer(ServerFn);//.listen(serverPort);

module.exports = Server;
