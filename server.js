//http://stackoverflow.com/questions/24468459/sending-a-json-to-server-and-retrieving-a-json-in-return-without-jquery
//http://stackoverflow.com/questions/15427220/how-to-handle-post-request-in-node-js
var http = require('http');
var url = require("url");
var fs = require('fs');
var ChildProcess = require('child_process');

var re_date = /^\/\d{4}-\d{2}-\d{2}/;

function getPathFromUrl(url) {
  return url.split("?")[0];
  //return url.split("?")[0].split("#")[0];
}

var ConvertCSV = function(fn) {
  // Data are saved in CSV format space efficiency and for easy appending of 
  // new values.  A request for a CSV data file will open one and convert it 
  // to Json.
  
  var lines = fn.split('\n');
  var names = lines[0].split(',');
  dat = {};
  for (var j=0; j<names.length; j++){
    dat[names[j]] = [];
  }
  
  for (var i=1; i<lines.length; i++) {
    if (lines[i].length > 0) {
      var vals = lines[i].split(','); 
      for (var j=0; j<names.length; j++) {
        dat[names[j]].push(vals[j]);
      }
    }
  }
  
  sdat = 'data = ' + JSON.stringify(dat);
  return sdat;
}


var GenLogList = function() {
  // Generates a list of of log files based on filenames that have a date format
  // e.g. 2017-01-01.csv
  // This list is used to populate a dropdown menu in loghistory.html
  var f = fs.readdirSync('./');
  f = f.filter(function(i) { return /^\d{4}-\d{2}-\d{2}/.test(i); });
  return "loglist = " + JSON.stringify(f);
}


var GenDSSensorList = function() {
  r = ChildProcess.execSync('cat /sys/devices/w1_bus_master1/w1_master_slaves').toString().trim().split('\n');
  return "dslist = " + JSON.stringify(r);
}


var serverPort = 8182;
http.createServer(function (request, response) {
  var params = url.parse(request.url,true);
  //console.log(request.url);
  if(request.method === "GET") {
    if (request.url === "/favicon.ico") {
      // Don't have an icon for any pages yet, won't actually be requested.
      response.writeHead(404, {'Content-Type': 'text/html'});
      response.write('<!doctype html><html><head><title>404</title></head><body>404: Resource Not Found</body></html>');
      response.end();
    } else if (re_date.test(request.url)) {
      // if a log file is requested, convert it to Json and return it in the 
      // response.
      //console.log(request.url);
      //console.log('json');
      fs.readFile('.'+request.url, 'utf-8', function(error,data){
        //console.log(request.url);
        if(error){
             response.writeHead(404, {"Content-type":"text/html"});
             response.end("Sorry the page was not found.. ..");
        }else{
             response.writeHead(200, {"Content-type":"text/html"});
             response.end(ConvertCSV(data));
        }
      });
    } else if (request.url === '/loglist.json') {
      // The list of existing log files needs to be generated by GenLogList()
      response.writeHead(200, {"Content-type":"text/html"});
      response.end(GenLogList());
    } else if (request.url === '/dslist.json') {
      // The list of existing log files needs to be generated by GenLogList()
      response.writeHead(200, {"Content-type":"text/html"});
      response.end(GenDSSensorList());
    } else {
      // This is the normal page request
      fs.readFile('.'+getPathFromUrl(request.url), function(error,data){
      //console.log(params.path);
      //console.log(request.url);
      //console.log(getPathFromUrl(request.url));
      
       if(error){
           response.writeHead(404, {"Content-type":"text/html"});
           response.end("Sorry the page was not found....");
       }else{
           //response.setHeader("Content-Type", "text/html");
           response.writeHead(200, {"Content-type":"text/html"});
           response.end(data);
       }
      });
      
    }
  } else if(request.method === "POST") {
    console.log('post!');
    if (request.url === "/setup.html") {
      // Data submitted via POST from setup.html is to replace the init.json
      // file used by the controller backend.
      
      var requestBody = '';
      request.on('data', function(data) {
        requestBody += data;
        if(requestBody.length > 1e7) {
          response.writeHead(413, 'Request Entity Too Large', {'Content-Type': 'text/html'});
          response.end('<!doctype html><html><head><title>413</title></head><body>413: Request Entity Too Large</body></html>');
        }
      });
      request.on('end', function() {
        console.log(requestBody);
        var formData = JSON.parse(requestBody);
        console.log(formData);
        fs.writeFile('init.json', requestBody, 'utf8');
        response.writeHead(200, {'Content-Type': 'text/html'});
        response.end('Done!');
      });
    } else {
      response.writeHead(404, 'Resource Not Found', {'Content-Type': 'text/html'});
      response.end('<!doctype html><html><head><title>404</title></head><body>404: Resource Not Found</body></html>');
    }
  } else {
    response.writeHead(405, 'Method Not Supported', {'Content-Type': 'text/html'});
    return response.end('<!doctype html><html><head><title>405</title></head><body>405: Method Not Supported</body></html>');
  }
}).listen(serverPort);

console.log('Server running at localhost:'+serverPort);